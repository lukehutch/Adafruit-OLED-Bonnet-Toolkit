/*
 * This file is part of the Adafruit OLED Bonnet Toolkit: a Java toolkit for the Adafruit 128x64 OLED bonnet,
 * with support for the screen, D-pad/buttons, UI layout, and task scheduling.
 *
 * Hosted at: https://github.com/lukehutch/Adafruit-OLED-Bonnet-Toolkit
 * 
 * This code is not associated with or endorsed by Adafruit. Adafruit is a trademark of Limor "Ladyada" Fried. 
 *
 * --
 * 
 * Based on code from https://github.com/entrusc/Pi-OLED
 * 
 * with modifications by Luke Hutchison
 * 
 * --
 * 
 * Copyright (c) 2016, Florian Frankenberger
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * * Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package font;

import oled.Display;
import oled.Display.Highlight;

class MonospaceFont extends Font {
    private final int minChar, maxChar, width, outerWidth;
    protected final byte[] data;

    private MonospaceFont(int minChar, int maxChar, int width, int height, int outerWidth, int outerHeight,
            byte[] data) {
        super(height, outerHeight);
        this.minChar = minChar;
        this.maxChar = maxChar;
        this.width = width;
        this.outerWidth = outerWidth;
        this.data = data;
    }

    @Override
    public int getWidth(char chr) {
        return width;
    }

    @Override
    public int getOuterWidth(char chr) {
        return outerWidth;
    }

    @Override
    public int getOuterWidth(String str) {
        return outerWidth * str.length();
    }

    @Override
    public int renderChar(char c, int x, int y, int maxW, int maxH, boolean on, Highlight highlight,
            Display display) {
        if (c > maxChar || c < minChar) {
            c = '?';
            if (c < minChar || c > maxChar) {
                throw new RuntimeException("Could not find fallback char '?'");
            }
        }
        int chrIdx = c - minChar;
        for (int i = 0; i < width && i < maxW; ++i) {
            int pix_x = x + i;
            int line = data[(chrIdx * width) + i];
            for (int j = 0; j < height && j < maxH; ++j) {
                boolean bit = (line & 0x01) != 0;
                if (bit) {
                    int pix_y = y + j;
                    display.setPixel(pix_x, pix_y, on, highlight);
                }
                line >>= 1;
            }
        }
        return outerWidth;
    }

    static final Font FONT_4X5 = new MonospaceFont(32, 95, 4, 5, 4, 6, new byte[] { //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x17, (byte) 0x00, (byte) 0x00, //
            (byte) 0x03, (byte) 0x00, (byte) 0x03, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x0A, (byte) 0x1F, (byte) 0x0A, //
            (byte) 0x17, (byte) 0x1F, (byte) 0x1D, (byte) 0x00, //
            (byte) 0x09, (byte) 0x04, (byte) 0x12, (byte) 0x00, //
            (byte) 0x0A, (byte) 0x15, (byte) 0x09, (byte) 0x14, //
            (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x0E, (byte) 0x11, (byte) 0x00, //
            (byte) 0x00, (byte) 0x11, (byte) 0x0E, (byte) 0x00, //
            (byte) 0x05, (byte) 0x02, (byte) 0x05, (byte) 0x00, //
            (byte) 0x04, (byte) 0x0E, (byte) 0x04, (byte) 0x00, //
            (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, //
            (byte) 0x04, (byte) 0x04, (byte) 0x04, (byte) 0x00, //
            (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x00, //
            (byte) 0x10, (byte) 0x0C, (byte) 0x03, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x11, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x12, (byte) 0x1F, (byte) 0x10, (byte) 0x00, //
            (byte) 0x1D, (byte) 0x15, (byte) 0x17, (byte) 0x00, //
            (byte) 0x15, (byte) 0x15, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x07, (byte) 0x04, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x17, (byte) 0x15, (byte) 0x1D, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x1D, (byte) 0x00, //
            (byte) 0x01, (byte) 0x01, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x17, (byte) 0x15, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x1A, (byte) 0x00, (byte) 0x00, //
            (byte) 0x04, (byte) 0x0A, (byte) 0x11, (byte) 0x00, //
            (byte) 0x0A, (byte) 0x0A, (byte) 0x0A, (byte) 0x00, //
            (byte) 0x11, (byte) 0x0A, (byte) 0x04, (byte) 0x00, //
            (byte) 0x01, (byte) 0x15, (byte) 0x07, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x17, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x05, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x0A, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x11, (byte) 0x11, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x11, (byte) 0x0E, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x11, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x05, (byte) 0x01, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x11, (byte) 0x1D, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x04, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x00, (byte) 0x1F, (byte) 0x00, (byte) 0x00, //
            (byte) 0x11, (byte) 0x11, (byte) 0x0F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x0C, (byte) 0x13, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x10, (byte) 0x10, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x02, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x06, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x11, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x05, (byte) 0x07, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x15, (byte) 0x1F, (byte) 0x08, //
            (byte) 0x1F, (byte) 0x0D, (byte) 0x17, (byte) 0x00, //
            (byte) 0x17, (byte) 0x15, (byte) 0x1D, (byte) 0x00, //
            (byte) 0x01, (byte) 0x1F, (byte) 0x01, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x10, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x0F, (byte) 0x10, (byte) 0x0F, (byte) 0x00, //
            (byte) 0x1F, (byte) 0x08, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x1B, (byte) 0x04, (byte) 0x1B, (byte) 0x00, //
            (byte) 0x03, (byte) 0x1C, (byte) 0x03, (byte) 0x00, //
            (byte) 0x19, (byte) 0x15, (byte) 0x13, (byte) 0x00, //
            (byte) 0x00, (byte) 0x1F, (byte) 0x11, (byte) 0x00, //
            (byte) 0x03, (byte) 0x0C, (byte) 0x10, (byte) 0x00, //
            (byte) 0x00, (byte) 0x11, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x02, (byte) 0x01, (byte) 0x02, (byte) 0x00, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x00, //
    });

    static final Font FONT_5X8 = new MonospaceFont(0, 255, 5, 8, 6, 9, new byte[] { //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, //
            (byte) 0x3E, (byte) 0x5B, (byte) 0x4F, (byte) 0x5B, (byte) 0x3E, //
            (byte) 0x3E, (byte) 0x6B, (byte) 0x4F, (byte) 0x6B, (byte) 0x3E, //
            (byte) 0x1C, (byte) 0x3E, (byte) 0x7C, (byte) 0x3E, (byte) 0x1C, //
            (byte) 0x18, (byte) 0x3C, (byte) 0x7E, (byte) 0x3C, (byte) 0x18, //
            (byte) 0x1C, (byte) 0x57, (byte) 0x7D, (byte) 0x57, (byte) 0x1C, //
            (byte) 0x1C, (byte) 0x5E, (byte) 0x7F, (byte) 0x5E, (byte) 0x1C, //
            (byte) 0x00, (byte) 0x18, (byte) 0x3C, (byte) 0x18, (byte) 0x00, //
            (byte) 0xFF, (byte) 0xE7, (byte) 0xC3, (byte) 0xE7, (byte) 0xFF, //
            (byte) 0x00, (byte) 0x18, (byte) 0x24, (byte) 0x18, (byte) 0x00, //
            (byte) 0xFF, (byte) 0xE7, (byte) 0xDB, (byte) 0xE7, (byte) 0xFF, //
            (byte) 0x30, (byte) 0x48, (byte) 0x3A, (byte) 0x06, (byte) 0x0E, //
            (byte) 0x26, (byte) 0x29, (byte) 0x79, (byte) 0x29, (byte) 0x26, //
            (byte) 0x40, (byte) 0x7F, (byte) 0x05, (byte) 0x05, (byte) 0x07, //
            (byte) 0x40, (byte) 0x7F, (byte) 0x05, (byte) 0x25, (byte) 0x3F, //
            (byte) 0x5A, (byte) 0x3C, (byte) 0xE7, (byte) 0x3C, (byte) 0x5A, //
            (byte) 0x7F, (byte) 0x3E, (byte) 0x1C, (byte) 0x1C, (byte) 0x08, //
            (byte) 0x08, (byte) 0x1C, (byte) 0x1C, (byte) 0x3E, (byte) 0x7F, //
            (byte) 0x14, (byte) 0x22, (byte) 0x7F, (byte) 0x22, (byte) 0x14, //
            (byte) 0x5F, (byte) 0x5F, (byte) 0x00, (byte) 0x5F, (byte) 0x5F, //
            (byte) 0x06, (byte) 0x09, (byte) 0x7F, (byte) 0x01, (byte) 0x7F, //
            (byte) 0x00, (byte) 0x66, (byte) 0x89, (byte) 0x95, (byte) 0x6A, //
            (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, //
            (byte) 0x94, (byte) 0xA2, (byte) 0xFF, (byte) 0xA2, (byte) 0x94, //
            (byte) 0x08, (byte) 0x04, (byte) 0x7E, (byte) 0x04, (byte) 0x08, //
            (byte) 0x10, (byte) 0x20, (byte) 0x7E, (byte) 0x20, (byte) 0x10, //
            (byte) 0x08, (byte) 0x08, (byte) 0x2A, (byte) 0x1C, (byte) 0x08, //
            (byte) 0x08, (byte) 0x1C, (byte) 0x2A, (byte) 0x08, (byte) 0x08, //
            (byte) 0x1E, (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x10, //
            (byte) 0x0C, (byte) 0x1E, (byte) 0x0C, (byte) 0x1E, (byte) 0x0C, //
            (byte) 0x30, (byte) 0x38, (byte) 0x3E, (byte) 0x38, (byte) 0x30, //
            (byte) 0x06, (byte) 0x0E, (byte) 0x3E, (byte) 0x0E, (byte) 0x06, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x5F, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x07, (byte) 0x00, //
            (byte) 0x14, (byte) 0x7F, (byte) 0x14, (byte) 0x7F, (byte) 0x14, //
            (byte) 0x24, (byte) 0x2A, (byte) 0x7F, (byte) 0x2A, (byte) 0x12, //
            (byte) 0x23, (byte) 0x13, (byte) 0x08, (byte) 0x64, (byte) 0x62, //
            (byte) 0x36, (byte) 0x49, (byte) 0x56, (byte) 0x20, (byte) 0x50, //
            (byte) 0x00, (byte) 0x08, (byte) 0x07, (byte) 0x03, (byte) 0x00, //
            (byte) 0x00, (byte) 0x1C, (byte) 0x22, (byte) 0x41, (byte) 0x00, //
            (byte) 0x00, (byte) 0x41, (byte) 0x22, (byte) 0x1C, (byte) 0x00, //
            (byte) 0x2A, (byte) 0x1C, (byte) 0x7F, (byte) 0x1C, (byte) 0x2A, //
            (byte) 0x08, (byte) 0x08, (byte) 0x3E, (byte) 0x08, (byte) 0x08, //
            (byte) 0x00, (byte) 0x80, (byte) 0x70, (byte) 0x30, (byte) 0x00, //
            (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x08, //
            (byte) 0x00, (byte) 0x00, (byte) 0x60, (byte) 0x60, (byte) 0x00, //
            (byte) 0x20, (byte) 0x10, (byte) 0x08, (byte) 0x04, (byte) 0x02, //
            (byte) 0x3E, (byte) 0x51, (byte) 0x49, (byte) 0x45, (byte) 0x3E, //
            (byte) 0x00, (byte) 0x42, (byte) 0x7F, (byte) 0x40, (byte) 0x00, //
            (byte) 0x72, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x46, //
            (byte) 0x21, (byte) 0x41, (byte) 0x49, (byte) 0x4D, (byte) 0x33, //
            (byte) 0x18, (byte) 0x14, (byte) 0x12, (byte) 0x7F, (byte) 0x10, //
            (byte) 0x27, (byte) 0x45, (byte) 0x45, (byte) 0x45, (byte) 0x39, //
            (byte) 0x3C, (byte) 0x4A, (byte) 0x49, (byte) 0x49, (byte) 0x31, //
            (byte) 0x41, (byte) 0x21, (byte) 0x11, (byte) 0x09, (byte) 0x07, //
            (byte) 0x36, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x36, //
            (byte) 0x46, (byte) 0x49, (byte) 0x49, (byte) 0x29, (byte) 0x1E, //
            (byte) 0x00, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x40, (byte) 0x34, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x08, (byte) 0x14, (byte) 0x22, (byte) 0x41, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x14, //
            (byte) 0x00, (byte) 0x41, (byte) 0x22, (byte) 0x14, (byte) 0x08, //
            (byte) 0x02, (byte) 0x01, (byte) 0x59, (byte) 0x09, (byte) 0x06, //
            (byte) 0x3E, (byte) 0x41, (byte) 0x5D, (byte) 0x59, (byte) 0x4E, //
            (byte) 0x7C, (byte) 0x12, (byte) 0x11, (byte) 0x12, (byte) 0x7C, //
            (byte) 0x7F, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x36, //
            (byte) 0x3E, (byte) 0x41, (byte) 0x41, (byte) 0x41, (byte) 0x22, //
            (byte) 0x7F, (byte) 0x41, (byte) 0x41, (byte) 0x41, (byte) 0x3E, //
            (byte) 0x7F, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x41, //
            (byte) 0x7F, (byte) 0x09, (byte) 0x09, (byte) 0x09, (byte) 0x01, //
            (byte) 0x3E, (byte) 0x41, (byte) 0x41, (byte) 0x51, (byte) 0x73, //
            (byte) 0x7F, (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x7F, //
            (byte) 0x00, (byte) 0x41, (byte) 0x7F, (byte) 0x41, (byte) 0x00, //
            (byte) 0x20, (byte) 0x40, (byte) 0x41, (byte) 0x3F, (byte) 0x01, //
            (byte) 0x7F, (byte) 0x08, (byte) 0x14, (byte) 0x22, (byte) 0x41, //
            (byte) 0x7F, (byte) 0x40, (byte) 0x40, (byte) 0x40, (byte) 0x40, //
            (byte) 0x7F, (byte) 0x02, (byte) 0x1C, (byte) 0x02, (byte) 0x7F, //
            (byte) 0x7F, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x7F, //
            (byte) 0x3E, (byte) 0x41, (byte) 0x41, (byte) 0x41, (byte) 0x3E, //
            (byte) 0x7F, (byte) 0x09, (byte) 0x09, (byte) 0x09, (byte) 0x06, //
            (byte) 0x3E, (byte) 0x41, (byte) 0x51, (byte) 0x21, (byte) 0x5E, //
            (byte) 0x7F, (byte) 0x09, (byte) 0x19, (byte) 0x29, (byte) 0x46, //
            (byte) 0x26, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x32, //
            (byte) 0x03, (byte) 0x01, (byte) 0x7F, (byte) 0x01, (byte) 0x03, //
            (byte) 0x3F, (byte) 0x40, (byte) 0x40, (byte) 0x40, (byte) 0x3F, //
            (byte) 0x1F, (byte) 0x20, (byte) 0x40, (byte) 0x20, (byte) 0x1F, //
            (byte) 0x3F, (byte) 0x40, (byte) 0x38, (byte) 0x40, (byte) 0x3F, //
            (byte) 0x63, (byte) 0x14, (byte) 0x08, (byte) 0x14, (byte) 0x63, //
            (byte) 0x03, (byte) 0x04, (byte) 0x78, (byte) 0x04, (byte) 0x03, //
            (byte) 0x61, (byte) 0x59, (byte) 0x49, (byte) 0x4D, (byte) 0x43, //
            (byte) 0x00, (byte) 0x7F, (byte) 0x41, (byte) 0x41, (byte) 0x41, //
            (byte) 0x02, (byte) 0x04, (byte) 0x08, (byte) 0x10, (byte) 0x20, //
            (byte) 0x00, (byte) 0x41, (byte) 0x41, (byte) 0x41, (byte) 0x7F, //
            (byte) 0x04, (byte) 0x02, (byte) 0x01, (byte) 0x02, (byte) 0x04, //
            (byte) 0x40, (byte) 0x40, (byte) 0x40, (byte) 0x40, (byte) 0x40, //
            (byte) 0x00, (byte) 0x03, (byte) 0x07, (byte) 0x08, (byte) 0x00, //
            (byte) 0x20, (byte) 0x54, (byte) 0x54, (byte) 0x78, (byte) 0x40, //
            (byte) 0x7F, (byte) 0x28, (byte) 0x44, (byte) 0x44, (byte) 0x38, //
            (byte) 0x38, (byte) 0x44, (byte) 0x44, (byte) 0x44, (byte) 0x28, //
            (byte) 0x38, (byte) 0x44, (byte) 0x44, (byte) 0x28, (byte) 0x7F, //
            (byte) 0x38, (byte) 0x54, (byte) 0x54, (byte) 0x54, (byte) 0x18, //
            (byte) 0x00, (byte) 0x08, (byte) 0x7E, (byte) 0x09, (byte) 0x02, //
            (byte) 0x18, (byte) 0xA4, (byte) 0xA4, (byte) 0x9C, (byte) 0x78, //
            (byte) 0x7F, (byte) 0x08, (byte) 0x04, (byte) 0x04, (byte) 0x78, //
            (byte) 0x00, (byte) 0x44, (byte) 0x7D, (byte) 0x40, (byte) 0x00, //
            (byte) 0x20, (byte) 0x40, (byte) 0x40, (byte) 0x3D, (byte) 0x00, //
            (byte) 0x7F, (byte) 0x10, (byte) 0x28, (byte) 0x44, (byte) 0x00, //
            (byte) 0x00, (byte) 0x41, (byte) 0x7F, (byte) 0x40, (byte) 0x00, //
            (byte) 0x7C, (byte) 0x04, (byte) 0x78, (byte) 0x04, (byte) 0x78, //
            (byte) 0x7C, (byte) 0x08, (byte) 0x04, (byte) 0x04, (byte) 0x78, //
            (byte) 0x38, (byte) 0x44, (byte) 0x44, (byte) 0x44, (byte) 0x38, //
            (byte) 0xFC, (byte) 0x18, (byte) 0x24, (byte) 0x24, (byte) 0x18, //
            (byte) 0x18, (byte) 0x24, (byte) 0x24, (byte) 0x18, (byte) 0xFC, //
            (byte) 0x7C, (byte) 0x08, (byte) 0x04, (byte) 0x04, (byte) 0x08, //
            (byte) 0x48, (byte) 0x54, (byte) 0x54, (byte) 0x54, (byte) 0x24, //
            (byte) 0x04, (byte) 0x04, (byte) 0x3F, (byte) 0x44, (byte) 0x24, //
            (byte) 0x3C, (byte) 0x40, (byte) 0x40, (byte) 0x20, (byte) 0x7C, //
            (byte) 0x1C, (byte) 0x20, (byte) 0x40, (byte) 0x20, (byte) 0x1C, //
            (byte) 0x3C, (byte) 0x40, (byte) 0x30, (byte) 0x40, (byte) 0x3C, //
            (byte) 0x44, (byte) 0x28, (byte) 0x10, (byte) 0x28, (byte) 0x44, //
            (byte) 0x4C, (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x7C, //
            (byte) 0x44, (byte) 0x64, (byte) 0x54, (byte) 0x4C, (byte) 0x44, //
            (byte) 0x00, (byte) 0x08, (byte) 0x36, (byte) 0x41, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x77, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x41, (byte) 0x36, (byte) 0x08, (byte) 0x00, //
            (byte) 0x02, (byte) 0x01, (byte) 0x02, (byte) 0x04, (byte) 0x02, //
            (byte) 0x3C, (byte) 0x26, (byte) 0x23, (byte) 0x26, (byte) 0x3C, //
            (byte) 0x1E, (byte) 0xA1, (byte) 0xA1, (byte) 0x61, (byte) 0x12, //
            (byte) 0x3A, (byte) 0x40, (byte) 0x40, (byte) 0x20, (byte) 0x7A, //
            (byte) 0x38, (byte) 0x54, (byte) 0x54, (byte) 0x55, (byte) 0x59, //
            (byte) 0x21, (byte) 0x55, (byte) 0x55, (byte) 0x79, (byte) 0x41, //
            (byte) 0x21, (byte) 0x54, (byte) 0x54, (byte) 0x78, (byte) 0x41, //
            (byte) 0x21, (byte) 0x55, (byte) 0x54, (byte) 0x78, (byte) 0x40, //
            (byte) 0x20, (byte) 0x54, (byte) 0x55, (byte) 0x79, (byte) 0x40, //
            (byte) 0x0C, (byte) 0x1E, (byte) 0x52, (byte) 0x72, (byte) 0x12, //
            (byte) 0x39, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x59, //
            (byte) 0x39, (byte) 0x54, (byte) 0x54, (byte) 0x54, (byte) 0x59, //
            (byte) 0x39, (byte) 0x55, (byte) 0x54, (byte) 0x54, (byte) 0x58, //
            (byte) 0x00, (byte) 0x00, (byte) 0x45, (byte) 0x7C, (byte) 0x41, //
            (byte) 0x00, (byte) 0x02, (byte) 0x45, (byte) 0x7D, (byte) 0x42, //
            (byte) 0x00, (byte) 0x01, (byte) 0x45, (byte) 0x7C, (byte) 0x40, //
            (byte) 0xF0, (byte) 0x29, (byte) 0x24, (byte) 0x29, (byte) 0xF0, //
            (byte) 0xF0, (byte) 0x28, (byte) 0x25, (byte) 0x28, (byte) 0xF0, //
            (byte) 0x7C, (byte) 0x54, (byte) 0x55, (byte) 0x45, (byte) 0x00, //
            (byte) 0x20, (byte) 0x54, (byte) 0x54, (byte) 0x7C, (byte) 0x54, //
            (byte) 0x7C, (byte) 0x0A, (byte) 0x09, (byte) 0x7F, (byte) 0x49, //
            (byte) 0x32, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x32, //
            (byte) 0x32, (byte) 0x48, (byte) 0x48, (byte) 0x48, (byte) 0x32, //
            (byte) 0x32, (byte) 0x4A, (byte) 0x48, (byte) 0x48, (byte) 0x30, //
            (byte) 0x3A, (byte) 0x41, (byte) 0x41, (byte) 0x21, (byte) 0x7A, //
            (byte) 0x3A, (byte) 0x42, (byte) 0x40, (byte) 0x20, (byte) 0x78, //
            (byte) 0x00, (byte) 0x9D, (byte) 0xA0, (byte) 0xA0, (byte) 0x7D, //
            (byte) 0x39, (byte) 0x44, (byte) 0x44, (byte) 0x44, (byte) 0x39, //
            (byte) 0x3D, (byte) 0x40, (byte) 0x40, (byte) 0x40, (byte) 0x3D, //
            (byte) 0x3C, (byte) 0x24, (byte) 0xFF, (byte) 0x24, (byte) 0x24, //
            (byte) 0x48, (byte) 0x7E, (byte) 0x49, (byte) 0x43, (byte) 0x66, //
            (byte) 0x2B, (byte) 0x2F, (byte) 0xFC, (byte) 0x2F, (byte) 0x2B, //
            (byte) 0xFF, (byte) 0x09, (byte) 0x29, (byte) 0xF6, (byte) 0x20, //
            (byte) 0xC0, (byte) 0x88, (byte) 0x7E, (byte) 0x09, (byte) 0x03, //
            (byte) 0x20, (byte) 0x54, (byte) 0x54, (byte) 0x79, (byte) 0x41, //
            (byte) 0x00, (byte) 0x00, (byte) 0x44, (byte) 0x7D, (byte) 0x41, //
            (byte) 0x30, (byte) 0x48, (byte) 0x48, (byte) 0x4A, (byte) 0x32, //
            (byte) 0x38, (byte) 0x40, (byte) 0x40, (byte) 0x22, (byte) 0x7A, //
            (byte) 0x00, (byte) 0x7A, (byte) 0x0A, (byte) 0x0A, (byte) 0x72, //
            (byte) 0x7D, (byte) 0x0D, (byte) 0x19, (byte) 0x31, (byte) 0x7D, //
            (byte) 0x26, (byte) 0x29, (byte) 0x29, (byte) 0x2F, (byte) 0x28, //
            (byte) 0x26, (byte) 0x29, (byte) 0x29, (byte) 0x29, (byte) 0x26, //
            (byte) 0x30, (byte) 0x48, (byte) 0x4D, (byte) 0x40, (byte) 0x20, //
            (byte) 0x38, (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x08, //
            (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x08, (byte) 0x38, //
            (byte) 0x2F, (byte) 0x10, (byte) 0xC8, (byte) 0xAC, (byte) 0xBA, //
            (byte) 0x2F, (byte) 0x10, (byte) 0x28, (byte) 0x34, (byte) 0xFA, //
            (byte) 0x00, (byte) 0x00, (byte) 0x7B, (byte) 0x00, (byte) 0x00, //
            (byte) 0x08, (byte) 0x14, (byte) 0x2A, (byte) 0x14, (byte) 0x22, //
            (byte) 0x22, (byte) 0x14, (byte) 0x2A, (byte) 0x14, (byte) 0x08, //
            (byte) 0xAA, (byte) 0x00, (byte) 0x55, (byte) 0x00, (byte) 0xAA, //
            (byte) 0xAA, (byte) 0x55, (byte) 0xAA, (byte) 0x55, (byte) 0xAA, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x00, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0xFF, (byte) 0x00, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0xFF, (byte) 0x00, //
            (byte) 0x10, (byte) 0x10, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, //
            (byte) 0x10, (byte) 0x10, (byte) 0xF0, (byte) 0x10, (byte) 0xF0, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0xFC, (byte) 0x00, //
            (byte) 0x14, (byte) 0x14, (byte) 0xF7, (byte) 0x00, (byte) 0xFF, //
            (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, //
            (byte) 0x14, (byte) 0x14, (byte) 0xF4, (byte) 0x04, (byte) 0xFC, //
            (byte) 0x14, (byte) 0x14, (byte) 0x17, (byte) 0x10, (byte) 0x1F, //
            (byte) 0x10, (byte) 0x10, (byte) 0x1F, (byte) 0x10, (byte) 0x1F, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0xF0, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x1F, (byte) 0x10, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x1F, (byte) 0x10, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0xF0, (byte) 0x10, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x10, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x10, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0xFF, (byte) 0x10, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x14, //
            (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, //
            (byte) 0x00, (byte) 0x00, (byte) 0x1F, (byte) 0x10, (byte) 0x17, //
            (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x04, (byte) 0xF4, //
            (byte) 0x14, (byte) 0x14, (byte) 0x17, (byte) 0x10, (byte) 0x17, //
            (byte) 0x14, (byte) 0x14, (byte) 0xF4, (byte) 0x04, (byte) 0xF4, //
            (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x00, (byte) 0xF7, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x14, //
            (byte) 0x14, (byte) 0x14, (byte) 0xF7, (byte) 0x00, (byte) 0xF7, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0x17, (byte) 0x14, //
            (byte) 0x10, (byte) 0x10, (byte) 0x1F, (byte) 0x10, (byte) 0x1F, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0xF4, (byte) 0x14, //
            (byte) 0x10, (byte) 0x10, (byte) 0xF0, (byte) 0x10, (byte) 0xF0, //
            (byte) 0x00, (byte) 0x00, (byte) 0x1F, (byte) 0x10, (byte) 0x1F, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x1F, (byte) 0x14, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x14, //
            (byte) 0x00, (byte) 0x00, (byte) 0xF0, (byte) 0x10, (byte) 0xF0, //
            (byte) 0x10, (byte) 0x10, (byte) 0xFF, (byte) 0x10, (byte) 0xFF, //
            (byte) 0x14, (byte) 0x14, (byte) 0x14, (byte) 0xFF, (byte) 0x14, //
            (byte) 0x10, (byte) 0x10, (byte) 0x10, (byte) 0x1F, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xF0, (byte) 0x10, //
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, //
            (byte) 0xF0, (byte) 0xF0, (byte) 0xF0, (byte) 0xF0, (byte) 0xF0, //
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, //
            (byte) 0x0F, (byte) 0x0F, (byte) 0x0F, (byte) 0x0F, (byte) 0x0F, //
            (byte) 0x38, (byte) 0x44, (byte) 0x44, (byte) 0x38, (byte) 0x44, //
            (byte) 0x7C, (byte) 0x2A, (byte) 0x2A, (byte) 0x3E, (byte) 0x14, //
            (byte) 0x7E, (byte) 0x02, (byte) 0x02, (byte) 0x06, (byte) 0x06, //
            (byte) 0x02, (byte) 0x7E, (byte) 0x02, (byte) 0x7E, (byte) 0x02, //
            (byte) 0x63, (byte) 0x55, (byte) 0x49, (byte) 0x41, (byte) 0x63, //
            (byte) 0x38, (byte) 0x44, (byte) 0x44, (byte) 0x3C, (byte) 0x04, //
            (byte) 0x40, (byte) 0x7E, (byte) 0x20, (byte) 0x1E, (byte) 0x20, //
            (byte) 0x06, (byte) 0x02, (byte) 0x7E, (byte) 0x02, (byte) 0x02, //
            (byte) 0x99, (byte) 0xA5, (byte) 0xE7, (byte) 0xA5, (byte) 0x99, //
            (byte) 0x1C, (byte) 0x2A, (byte) 0x49, (byte) 0x2A, (byte) 0x1C, //
            (byte) 0x4C, (byte) 0x72, (byte) 0x01, (byte) 0x72, (byte) 0x4C, //
            (byte) 0x30, (byte) 0x4A, (byte) 0x4D, (byte) 0x4D, (byte) 0x30, //
            (byte) 0x30, (byte) 0x48, (byte) 0x78, (byte) 0x48, (byte) 0x30, //
            (byte) 0xBC, (byte) 0x62, (byte) 0x5A, (byte) 0x46, (byte) 0x3D, //
            (byte) 0x3E, (byte) 0x49, (byte) 0x49, (byte) 0x49, (byte) 0x00, //
            (byte) 0x7E, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x7E, //
            (byte) 0x2A, (byte) 0x2A, (byte) 0x2A, (byte) 0x2A, (byte) 0x2A, //
            (byte) 0x44, (byte) 0x44, (byte) 0x5F, (byte) 0x44, (byte) 0x44, //
            (byte) 0x40, (byte) 0x51, (byte) 0x4A, (byte) 0x44, (byte) 0x40, //
            (byte) 0x40, (byte) 0x44, (byte) 0x4A, (byte) 0x51, (byte) 0x40, //
            (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x01, (byte) 0x03, //
            (byte) 0xE0, (byte) 0x80, (byte) 0xFF, (byte) 0x00, (byte) 0x00, //
            (byte) 0x08, (byte) 0x08, (byte) 0x6B, (byte) 0x6B, (byte) 0x08, //
            (byte) 0x36, (byte) 0x12, (byte) 0x36, (byte) 0x24, (byte) 0x36, //
            (byte) 0x06, (byte) 0x0F, (byte) 0x09, (byte) 0x0F, (byte) 0x06, //
            (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x00, //
            (byte) 0x00, (byte) 0x00, (byte) 0x10, (byte) 0x10, (byte) 0x00, //
            (byte) 0x30, (byte) 0x40, (byte) 0xFF, (byte) 0x01, (byte) 0x01, //
            (byte) 0x00, (byte) 0x1F, (byte) 0x01, (byte) 0x01, (byte) 0x1E, //
            (byte) 0x00, (byte) 0x19, (byte) 0x1D, (byte) 0x17, (byte) 0x12, //
            (byte) 0x00, (byte) 0x3C, (byte) 0x3C, (byte) 0x3C, (byte) 0x3C, //
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, //
    });
}